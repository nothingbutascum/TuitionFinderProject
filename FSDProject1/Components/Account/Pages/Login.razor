@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using FSDProject1.Components.Layout
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using FSDProject1.Data

@inject SignInManager<FSDProject1User> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<!-- Add Google Fonts -->
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">

<!-- Include your NavMenu component -->
<NavMenu />

<style>
    /* General Styles */
    body {
        font-family: 'Poppins', sans-serif;
        margin: 0;
        padding: 0;
        height: 100vh;
        background-color: #f8f9fa;
    }

    .login-container {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100vh;
    }

    .login-box {
        display: flex;
        max-width: 900px;
        width: 100%;
        background-color: #fff;
        border-radius: 10px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }

    .image-section {
        flex: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #e6e6e6;
    }

        .image-section img {
            max-width: 100%;
            height: auto;
            display: block;
        }

    .form-section {
        flex: 1;
        padding: 2rem;
        display: flex;
        flex-direction: column;
        justify-content: center;
        text-align: center;
    }

    .form-group {
        margin-bottom: 1rem;
        text-align: left;
    }

        .form-group label {
            font-size: 1rem;
            font-weight: 600;
            color: #2d2d2d;
            display: block;
        }

        .form-group input {
            width: 100%;
            padding: 0.75rem;
            font-size: 1rem;
            border: none;
            border-bottom: 2px solid #ccc;
            outline: none;
            background: transparent;
        }

    .btn-primary {
        width: 100%;
        padding: 0.75rem;
        font-size: 1rem;
        font-weight: 600;
        border-radius: 5px;
        background-color: #6a5acd;
        color: white;
        border: none;
        cursor: pointer;
    }

        .btn-primary:hover {
            background-color: #483d8b;
        }

    .forgot-password {
        text-align: center;
        margin-top: 1rem;
    }

        .forgot-password a {
            color: #6a5acd;
            text-decoration: none;
        }

            .forgot-password a:hover {
                text-decoration: underline;
            }
</style>

<!-- Login Form -->
<div class="login-container">
    <div class="login-box">
        <div class="image-section">
            <img src="/images/tutor.jpg" alt="Tutor Image" onerror="this.onerror=null; this.src='/images/placeholder.png'" />
        </div>
        <div class="form-section">
            <h2>Login</h2>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="text-danger text-center mb-3">@errorMessage</div>
            }

            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger mb-3" role="alert" />

                <!-- Email Field -->
                <div class="form-group">
                    <label for="email">Email</label>
                    <InputText id="email" @bind-Value="Input.Email" class="form-control" placeholder="name@example.com" />
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>

                <!-- Password Field -->
                <div class="form-group">
                    <label for="password">Password</label>
                    <InputText id="password" type="password" @bind-Value="Input.Password" class="form-control" />
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>

                <!-- Login Button -->
                <button type="submit" class="btn-primary">Login</button>

                <!-- Forgot Password Link -->
                <div class="forgot-password">
                    <a href="/Account/ForgotPassword">Forgot Password?</a>
                </div>
            </EditForm>
        </div>
    </div>
</div>





@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            NavigationManager.NavigateTo("/"); // Redirect to home
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo("Account/LoginWith2fa", new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
