@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using FSDProject1.Components.Layout
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using FSDProject1.Data

@inject SignInManager<FSDProject1User> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<!-- Add Google Fonts -->
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">

<!-- Include your NavMenu component -->
<NavMenu />

<style>
    /* Custom CSS for the header */
    .custom-header {
        font-family: 'Poppins', sans-serif;
        font-weight: 600;
        font-size: 2rem;
        color: #fff;
    }

    /* Ensure the rest of the form uses a clean font */
    body {
        font-family: 'Poppins', sans-serif;
        margin: 0;
        padding: 0;
        height: 100vh;
        background-image: url('/images/background.jpg'); /* Add your background image path here */
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
    }

    /* Login Container */
    .login-container {
        width: 100%;
        max-width: 400px;
        margin: 0 auto;
        padding: 2rem;
        border-radius: 10px;
        background-color: rgba(255, 255, 255, 0.9); /* Semi-transparent white background */
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    }

    /* Input Group */
    .input-group {
        margin-bottom: 1.5rem;
    }

        .input-group label {
            font-size: 0.9rem;
            font-weight: 600;
            color: #2d2d2d;
            margin-bottom: 0.5rem;
            display: block;
        }

        .input-group input {
            width: 100%;
            padding: 0.75rem;
            font-size: 1rem;
            border: 1px solid #ddd;
            border-radius: 5px;
            box-sizing: border-box;
        }

    /* Buttons */
    .btn {
        width: 100%;
        padding: 0.75rem;
        font-size: 1rem;
        font-weight: 600;
        border-radius: 5px;
        text-align: center;
        text-decoration: none;
        cursor: pointer;
        transition: background-color 0.3s ease;
        border: none;
    }

    .btn-primary {
        background-color: #004e92;
        color: white;
    }

        .btn-primary:hover {
            background-color: #003366;
        }

    .btn-secondary {
        background-color: #f0f0f0;
        color: #004e92;
        border: 1px solid #004e92;
    }

        .btn-secondary:hover {
            background-color: #004e92;
            color: white;
        }

    /* Error Message */
    .error-message {
        color: #dc3545;
        font-size: 0.9rem;
        margin-bottom: 1rem;
    }

    /* Links */
    .forgot-password {
        text-align: center;
        margin-top: 1rem;
    }

        .forgot-password a {
            color: #004e92;
            text-decoration: none;
        }

            .forgot-password a:hover {
                text-decoration: underline;
            }

    /* Spacing for the login form */
    .login-form {
        margin-top: 2rem;
    }
</style>

<!-- Login Form -->
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow-sm login-container">
                <div class="card-header bg-primary text-white text-center">
                    <h2 class="mb-0 custom-header">Log in</h2>
                </div>
                <div class="card-body p-4 login-form">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="error-message">
                            <span class="error-icon">!</span>
                            @errorMessage
                        </div>
                    }

                    <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger mb-3" role="alert" />

                        <!-- Email Field -->
                        <div class="input-group">
                            <label for="email">Email</label>
                            <InputText id="email"
                                       @bind-Value="Input.Email"
                                       class="form-control"
                                       autocomplete="username"
                                       aria-required="true"
                                       placeholder="name@example.com" />
                            <ValidationMessage For="() => Input.Email" class="text-danger" />
                        </div>

                        <!-- Password Field -->
                        <div class="input-group">
                            <label for="password">Password</label>
                            <InputText id="password"
                                       type="password"
                                       @bind-Value="Input.Password"
                                       class="form-control"
                                       autocomplete="current-password"
                                       aria-required="true" />
                            <ValidationMessage For="() => Input.Password" class="text-danger" />
                        </div>

                        <!-- Remember Me Checkbox -->
                        <div class="form-check mb-3">
                            <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" />
                            <label class="form-check-label" for="rememberMe">Remember me</label>
                        </div>

                        <!-- Login Button -->
                        <button type="submit" class="btn btn-primary">Sign In</button>

                        <!-- Register Link -->
                        <div class="text-center mt-3">
                            <a href="/Account/Register" class="btn btn-secondary">Register</a>
                        </div>

                        <!-- Forgot Password Link -->
                        <div class="forgot-password">
                            <a href="/Account/ForgotPassword">Forgot your password?</a>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            NavigationManager.NavigateTo("/"); // Redirect to home
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo("Account/LoginWith2fa", new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}