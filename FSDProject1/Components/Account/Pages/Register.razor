@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using FSDProject1.Data

@inject UserManager<FSDProject1User> UserManager
@inject IUserStore<FSDProject1User> UserStore
@inject SignInManager<FSDProject1User> SignInManager
@inject IEmailSender<FSDProject1User> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject RoleManager<IdentityRole> RoleManager

<PageTitle>Register</PageTitle>

<!-- Add Google Fonts -->
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap" rel="stylesheet">

<style>
    /* Custom CSS for the header */
    .custom-header {
        font-family: 'Poppins', sans-serif;
        font-weight: 600;
        font-size: 2rem;
        color: #fff;
    }

    /* Ensure the rest of the form uses a clean font */
    body {
        font-family: 'Poppins', sans-serif;
    }
</style>

<!-- Registration Form -->
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white text-center">
                    <h2 class="mb-0 custom-header">Create a New Account</h2>
                </div>
                <div class="card-body p-4">
                    <StatusMessage Message="@Message" />
                    <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger mb-3" role="alert" />

                        <!-- Email Field -->
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                            <ValidationMessage For="() => Input.Email" class="text-danger" />
                        </div>

                        <!-- First Name Field -->
                        <div class="mb-3">
                            <label for="firstName" class="form-label">First Name</label>
                            <InputText @bind-Value="Input.FirstName" class="form-control" autocomplete="firstname" aria-required="true" placeholder="Bill" />
                            <ValidationMessage For="() => Input.FirstName" class="text-danger" />
                        </div>

                        <!-- Last Name Field -->
                        <div class="mb-3">
                            <label for="lastName" class="form-label">Last Name</label>
                            <InputText @bind-Value="Input.LastName" class="form-control" autocomplete="lastname" aria-required="true" placeholder="Gates" />
                            <ValidationMessage For="() => Input.LastName" class="text-danger" />
                        </div>

                        <!-- Password Field -->
                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                            <ValidationMessage For="() => Input.Password" class="text-danger" />
                        </div>

                        <!-- Confirm Password Field -->
                        <div class="mb-4">
                            <label for="confirm-password" class="form-label">Confirm Password</label>
                            <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                            <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                        </div>

                        <!-- Register Button -->
                        <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>



@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        user.FirstName = Input.FirstName;
        user.LastName = Input.LastName;

        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        // Create the user role if it doesn't exist
        if (!await RoleManager.RoleExistsAsync("User"))
        {
            await RoleManager.CreateAsync(new IdentityRole("User"));
        }
        // Add the user to the user role
        await UserManager.AddToRoleAsync(user, "User");
        // Add the user ID as a claim when the user registers
        await UserManager.AddClaimAsync(user, new System.Security.Claims.Claim("userId", user.Id));

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private FSDProject1User CreateUser()
    {
        try
        {
            return Activator.CreateInstance<FSDProject1User>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(FSDProject1User)}'. " +
                $"Ensure that '{nameof(FSDProject1User)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<FSDProject1User> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<FSDProject1User>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [Display(Name = "First Name")]
        public string FirstName { get; set; } = "";

        [Required]
        [Display(Name = "Last Name")]
        public string LastName { get; set; } = "";

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}