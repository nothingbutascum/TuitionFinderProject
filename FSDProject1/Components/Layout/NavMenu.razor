@using Microsoft.AspNetCore.Components.Authorization
@implements IDisposable
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<header class="navbar">
    <div class="logo">
        <img src="/images/ht.png" alt="Hawk Tuition Finder Logo" />
    </div>

    <nav class="navigation">
        <ul class="nav-links">
            <li><NavLink href="/" Match="NavLinkMatch.All">Home</NavLink></li>
            <li><NavLink href="/about">About Us</NavLink></li>
            <li><NavLink href="/bookings/create">Booking</NavLink></li>
            <li><NavLink href="/reviews/create">Contact Us</NavLink></li>

            @if (isAdmin)
            {
                <li class="dropdown">
                    <span class="dropdown-toggle">Manage</span>
                    <ul class="dropdown-menu">
                        <li><NavLink href="/tutors">Manage Tutors</NavLink></li>
                        <li><NavLink href="/studentusers">Manage Students</NavLink></li>
                        <li><NavLink href="/bookings">Manage Bookings</NavLink></li>
                        <li><NavLink href="/reviews">View Reviews</NavLink></li>
                    </ul>
                </li>
            }
        </ul>
    </nav>

    <AuthorizeView>
        <Authorized>
            <div class="auth-buttons">
                <NavLink href="Account/Manage" class="username">@context.User.Identity?.Name</NavLink>
                <form action="Account/Logout" method="post" class="d-inline">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                    <button type="submit" class="logout-button">Logout</button>
                </form>
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="auth-buttons">
                <NavLink href="Account/Login" class="auth-link">Login</NavLink>
                <NavLink href="Account/Register" class="auth-link">Register</NavLink>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</header>

<!-- 🌟 Improved Navigation Styling -->
<style>
    /* 🔹 NAVBAR */
    .navbar {
        background: linear-gradient(90deg, #004e92, #000428);
        color: white;
        padding: 15px 40px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        position: sticky;
        top: 0;
        z-index: 1000;
        display: flex;
        align-items: center;
        justify-content: space-between;
        font-family: Arial, sans-serif;
    }

    /* 🔹 LOGO */
    .logo img {
        height: 100px;
        width: auto;
    }

    /* 🔹 NAVIGATION */
    .nav-links {
        list-style: none;
        padding: 0;
        margin: 0;
        display: flex;
        gap: 25px;
    }

        .nav-links li {
            position: relative;
        }

        .nav-links a {
            color: white;
            text-decoration: none;
            font-size: 1.1em;
            font-weight: 500;
            text-transform: uppercase;
            transition: color 0.3s ease;
        }

            .nav-links a:hover {
                color: #ffcd3c;
            }

    /* 🔹 DROPDOWN MENU */
    .dropdown {
        position: relative;
        cursor: pointer;
    }

    .dropdown-toggle {
        color: white;
        text-transform: uppercase;
        font-size: 1.1em;
        font-weight: 500;
        padding: 10px;
        cursor: pointer;
        transition: color 0.3s ease;
    }

        .dropdown-toggle:hover {
            color: #ffcd3c;
        }

    .dropdown-menu {
        display: none;
        position: absolute;
        background: white;
        min-width: 180px;
        border-radius: 5px;
        box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2);
        top: 100%;
        left: 0;
        z-index: 1000;
        padding: 0;
    }

        .dropdown-menu li {
            list-style: none;
            padding: 10px;
            text-align: left;
        }

        .dropdown-menu a {
            color: black;
            text-decoration: none;
            font-size: 1em;
            display: block;
            padding: 10px;
        }

            .dropdown-menu a:hover {
                background: #f5f5f5;
                border-radius: 5px;
            }

    .dropdown:hover .dropdown-menu {
        display: block;
    }

    /* 🔹 AUTH BUTTONS */
    .auth-buttons {
        display: flex;
        gap: 15px;
        align-items: center;
    }

    .username {
        font-size: 1em;
        font-weight: bold;
        color: #ffcd3c;
        text-transform: uppercase;
        padding-right: 10px;
    }

    .auth-link,
    .logout-button {
        font-size: 0.9em;
        padding: 8px 18px;
        text-transform: uppercase;
        font-weight: 600;
        border: 2px solid white;
        border-radius: 30px;
        text-decoration: none;
        color: white;
        background: transparent;
        transition: all 0.3s ease-in-out;
        cursor: pointer;
    }

        .auth-link:hover,
        .logout-button:hover {
            background-color: white;
            color: #004e92;
        }

    /* 🔹 RESPONSIVE DESIGN */
    @@media (max-width: 768px) {
        .navbar

    {
        flex-direction: column;
        padding: 10px;
    }

    .logo img {
        height: 80px;
    }

    .nav-links {
        flex-direction: column;
        gap: 10px;
        text-align: center;
        margin: 10px 0;
    }

    .auth-buttons {
        margin-top: 10px;
    }

    }
</style>

@code {
    private string? currentUrl;
    private bool isAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAdmin = user.IsInRole("Admin");
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
