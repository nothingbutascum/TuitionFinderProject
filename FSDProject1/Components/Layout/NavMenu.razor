@using Microsoft.AspNetCore.Components.Authorization
@implements IDisposable
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<header>
    <div class="logo">
        <img src="/images/ht.png" alt="Hawk Tuition Finder Logo" />
    </div>
    <nav class="navigation">
        <ul>
            <li><NavLink href="" Match="NavLinkMatch.All">Home</NavLink></li>
            <li><NavLink href="about">About Us</NavLink></li>
            <li><NavLink href="/bookings/create">Booking</NavLink></li>
            <li><NavLink href="/reviews/create">Contact Us</NavLink></li>

            @if (isAdmin)
            {
                <li><NavLink href="/tutors/create">Manage Tutors</NavLink></li>
            }
        </ul>
    </nav>

    <AuthorizeView>
        <Authorized>
            <div class="auth-buttons">
                <NavLink href="Account/Manage">@context.User.Identity?.Name</NavLink>
                <form action="Account/Logout" method="post" class="d-inline">
                    <AntiforgeryToken />
                    <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                    <button type="submit" class="logout-button">Logout</button>
                </form>
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="auth-buttons">
                <NavLink href="Account/Login">Login</NavLink>
                <NavLink href="Account/Register">Register</NavLink>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</header>

<style>
    header {
        background: linear-gradient(90deg, #004e92, #000428);
        color: white;
        padding: 10px 30px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        position: sticky;
        top: 0;
        z-index: 1000;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    .logo img {
        height: 120px;
        width: auto;
    }

    .navigation ul {
        list-style: none;
        padding: 0;
        margin: 0;
        display: flex;
        gap: 30px;
    }

    .navigation ::deep a {
        color: white;
        text-decoration: none;
        font-size: 1.1em;
        font-weight: 500;
        text-transform: uppercase;
        transition: color 0.3s ease;
    }

        .navigation ::deep a:hover {
            color: #ffcd3c;
        }

    /* Auth Buttons */
    .auth-buttons {
        display: flex;
        gap: 15px;
        align-items: center;
    }

        .auth-buttons ::deep a,
        .logout-button {
            font-size: 0.9em;
            padding: 8px 20px;
            text-transform: uppercase;
            font-weight: 600;
            border: 2px solid white;
            border-radius: 30px;
            text-decoration: none;
            color: white;
            background: transparent;
            transition: all 0.3s ease-in-out;
            cursor: pointer;
        }

            .auth-buttons ::deep a:hover,
            .logout-button:hover {
                background-color: white;
                color: #004e92;
            }

    /* Responsive Design */
    @@media (max-width: 768px) {
        header {
            flex-direction: column;
            padding: 10px;
        }

        .logo img {
            height: 80px;
        }

        .navigation ul {
            flex-direction: column;
            gap: 10px;
            text-align: center;
            margin: 10px 0;
        }

        .auth-buttons {
            margin-top: 10px;
        }
    }
</style>

@code {
    private string? currentUrl;
    private bool isAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAdmin = user.IsInRole("Admin");
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}
