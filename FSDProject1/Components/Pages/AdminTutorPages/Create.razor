@page "/admintutors/create"
@attribute [Authorize(Roles = "Admin")]
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using FSDProject1.Domain
@using FSDProject1.Data
@inject IDbContextFactory<FSDProject1Context> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Create Admin Tutor</PageTitle>

<h1>Create Admin Tutor</h1>
<hr />

@if (isCheckingAuth)
{
    <p>Loading...</p>
}
else if (isAdmin)
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="AdminTutor" OnValidSubmit="CreateAdminTutor" FormName="createAdminTutorForm">
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" role="alert" />

                <!-- Tutor ID -->
                <div class="mb-3">
                    <label for="tutorid" class="form-label">Tutor ID:</label>
                    <InputNumber id="tutorid" @bind-Value="AdminTutor.TutorId" class="form-control" />
                    <ValidationMessage For="() => AdminTutor.TutorId" class="text-danger" />
                </div>

                <!-- Subject ID -->
                <div class="mb-3">
                    <label for="subjectid" class="form-label">Subject ID:</label>
                    <InputNumber id="subjectid" @bind-Value="AdminTutor.SubjectId" class="form-control" />
                    <ValidationMessage For="() => AdminTutor.SubjectId" class="text-danger" />
                </div>

                <!-- Tutor Creation Section -->
                @if (!TutorExists)
                {
                    <h3>Create New Tutor</h3>
                    <div class="mb-3">
                        <label for="name" class="form-label">Name:</label>
                        <InputText id="name" @bind-Value="NewTutor.Name" class="form-control" />
                        <ValidationMessage For="() => NewTutor.Name" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="qualification" class="form-label">Qualification:</label>
                        <InputText id="qualification" @bind-Value="NewTutor.Qualification" class="form-control" />
                        <ValidationMessage For="() => NewTutor.Qualification" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="experience" class="form-label">Experience:</label>
                        <InputText id="experience" @bind-Value="NewTutor.Experience" class="form-control" />
                        <ValidationMessage For="() => NewTutor.Experience" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="hourlyrate" class="form-label">Hourly Rate:</label>
                        <InputNumber id="hourlyrate" @bind-Value="NewTutor.HourlyRate" class="form-control" />
                        <ValidationMessage For="() => NewTutor.HourlyRate" class="text-danger" />
                    </div>
                }

                <button type="submit" class="btn btn-primary">Create</button>
            </EditForm>
        </div>
    </div>
}
else
{
    <div class="alert alert-danger" role="alert">
        <h3>Unauthorized</h3>
        <p>You do not have permission to access this page.</p>
        <a href="/" class="btn btn-secondary">Go to Home</a>
    </div>
}

<div>
    <a href="/admintutors">Back to List</a>
</div>

@code {
    private AdminTutor AdminTutor { get; set; } = new();
    private Tutors NewTutor { get; set; } = new(); // New tutor model for creating tutor
    private bool TutorExists = false; // Flag to track if the tutor exists
    private string userId = "System";
    private bool isAdmin = false;
    private bool isCheckingAuth = true; // Flag to show loading state

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not { IsAuthenticated: true })
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        // Check if the user is in the "Admin" role
        isAdmin = user.IsInRole("Admin");

        if (!isAdmin)
        {
            NavigationManager.NavigateTo("/unauthorized");
            return;
        }

        // Get User ID
        var userIdClaim = user.FindFirst("sub"); // "sub" is the standard claim for user ID in Identity
        if (userIdClaim != null)
        {
            userId = userIdClaim.Value;
        }

        isCheckingAuth = false;
    }

    private async Task CreateAdminTutor()
    {
        using var context = DbFactory.CreateDbContext();

        // Set the userId to the CreatedBy and UpdatedBy fields
        AdminTutor.CreatedBy = userId;
        AdminTutor.UpdatedBy = userId;

        // Set the DateCreated and DateUpdated fields to the current date and time
        AdminTutor.DateCreated = DateOnly.FromDateTime(DateTime.Now);
        AdminTutor.DateUpdated = DateTime.Now;

        // Check if the Tutor exists, if not create a new tutor
        var tutor = await context.Tutors
                                 .FirstOrDefaultAsync(t => t.TutorId == AdminTutor.TutorId);

        if (tutor == null)
        {
            // Create a new Tutor if it doesn't exist
            tutor = new Tutors
                {
                    Name = NewTutor.Name,
                    Qualification = NewTutor.Qualification,
                    Experience = NewTutor.Experience,
                    HourlyRate = NewTutor.HourlyRate,
                    Rating = 5, // Default rating
                    DateCreated = DateTime.Now,
                    DateUpdated = DateTime.Now,
                    CreatedBy = userId,
                    UpdatedBy = userId
                };

            context.Tutors.Add(tutor);
            await context.SaveChangesAsync();

            // Assign the new TutorId to AdminTutor
            AdminTutor.TutorId = tutor.TutorId;
        }

        // Ensure SubjectId exists
        var subjectExists = await context.Subjects
                                         .AnyAsync(s => s.SubjectId == AdminTutor.SubjectId);

        if (!subjectExists)
        {
            // Handle error if subject doesn't exist
            Console.WriteLine($"Error: SubjectId {AdminTutor.SubjectId} does not exist.");
            return;
        }

        // Add AdminTutor to the context and save changes
        context.AdminTutor.Add(AdminTutor);
        await context.SaveChangesAsync();

        // Redirect to the Admin Tutor list after successful creation
        NavigationManager.NavigateTo("/admintutors");
    }
}