@page "/admintutors/delete"
@using Microsoft.EntityFrameworkCore
@using FSDProject1.Domain
@inject IDbContextFactory<FSDProject1.Data.FSDProject1Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>AdminTutor</h2>
    <hr />
    @if (admintutor is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@admintutor.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@admintutor.DateUpdated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@admintutor.CreatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@admintutor.UpdatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">TutorId</dt>
            <dd class="col-sm-10">@admintutor.TutorId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">SubjectId</dt>
            <dd class="col-sm-10">@admintutor.SubjectId</dd>
        </dl>
        <EditForm method="post" Model="admintutor" OnValidSubmit="DeleteAdminTutor" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(admintutor is null)">Delete</button> |
            <a href="/admintutors">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private AdminTutor? admintutor;

    [SupplyParameterFromQuery]
    private int AdminTutorId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        admintutor = await context.AdminTutor.FirstOrDefaultAsync(m => m.AdminTutorId == AdminTutorId);

        if (admintutor is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteAdminTutor()
    {
        using var context = DbFactory.CreateDbContext();
        context.AdminTutor.Remove(admintutor!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/admintutors");
    }
}
