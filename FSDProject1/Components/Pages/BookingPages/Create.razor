@page "/bookings/create"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using FSDProject1.Domain
@inject IDbContextFactory<FSDProject1.Data.FSDProject1Context> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS
@using System.Security.Claims
@rendermode InteractiveServer

<PageTitle>Create Booking</PageTitle>

<h1>Create Booking</h1>
<hr />

@if (!string.IsNullOrEmpty(DuplicateBookingMessage))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        @DuplicateBookingMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="row">
    <div class="col-md-4">
        <EditForm Model="Booking" OnValidSubmit="ShowConfirmationModal" FormName="createBooking">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="mb-3">
                <label for="subjectid" class="form-label">Select Subject:</label>
                <InputSelect id="subjectid" @bind-Value="SelectedSubjectId" class="form-control">
                    <option value="0" disabled>Select a subject</option>
                    @if (Subjects != null && Subjects.Any())
                    {
                        foreach (var subject in Subjects)
                        {
                            <option value="@subject.SubjectId">@subject.Name</option>
                        }
                    }
                </InputSelect>
            </div>

            <div class="mb-3">
                <label for="tutorid" class="form-label">Select Tutor:</label>
                <InputSelect id="tutorid" @bind-Value="SelectedTutorId" class="form-control">
                    <option value="0" disabled>Select a tutor</option>
                    @if (Tutors != null && Tutors.Any())
                    {
                        foreach (var tutor in Tutors)
                        {
                            <option value="@tutor.TutorId">@tutor.Name</option>
                        }
                    }
                </InputSelect>
            </div>

            <div class="mb-3">
                <label for="date" class="form-label">Date:</label>
                <InputDate id="date" @bind-Value="Booking.Date" class="form-control" @onchange="LoadBookedTimeSlots" />
            </div>

            <div class="mb-3">
                <label for="time" class="form-label">Select Time Slot:</label>
                <InputSelect id="time" @bind-Value="Booking.Time" class="form-control">
                    <option value="" disabled>Select a time</option>
                    @foreach (var timeSlot in AvailableTimeSlots)
                    {
                        <option value="@timeSlot" disabled="@BookedTimeSlots.Contains(timeSlot)">@timeSlot</option>
                    }
                </InputSelect>
            </div>

            <button type="submit" class="btn btn-primary">Confirm Booking</button>
        </EditForm>
    </div>
</div>

<!-- Back Link -->
<div>
    
</div>

<!-- Bootstrap Modal for Confirmation -->
<div class="modal fade" id="bookingConfirmationModal" tabindex="-1" aria-labelledby="bookingConfirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="bookingConfirmationModalLabel">Confirm Your Booking</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p><strong>Subject:</strong> @SelectedSubjectName</p>
                <p><strong>Tutor:</strong> @SelectedTutorName</p>
                <p><strong>Date:</strong> @Booking.Date.ToShortDateString()</p>
                <p><strong>Time:</strong> @Booking.Time</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="ConfirmBooking">Confirm</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Tutors> Tutors { get; set; } = new();
    private List<Subjects> Subjects { get; set; } = new();
    private int SelectedSubjectId { get; set; } = 0;
    private int SelectedTutorId { get; set; } = 0;
    private StudentUser StudentUser { get; set; } = new();
    private string SelectedSubjectName { get; set; } = "";
    private string SelectedTutorName { get; set; } = "";

    private List<string> AvailableTimeSlots = new()
    {
        "09:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00"
    };

    private HashSet<string> BookedTimeSlots = new();
    private List<Booking> bookings = new();
    private List<StudentUser> studentUsers = new();
    private string DuplicateBookingMessage { get; set; } = string.Empty;

    [SupplyParameterFromForm(FormName = "createBooking")]
    private Booking Booking { get; set; } = new()
        {
            Date = DateTime.Now,
            Status = "Confirmed"
        };

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Subjects = await context.Subjects.ToListAsync();
        Tutors = await context.Tutors.ToListAsync();
        bookings = await context.Booking.ToListAsync();
        studentUsers = await context.StudentUser.ToListAsync();

        if (Tutors.Any())
        {
            SelectedTutorId = Tutors.First().TutorId;
        }
    }

    private void LoadBookedTimeSlots()
    {
        BookedTimeSlots.Clear();
        foreach (var b in bookings)
        {
            if (b.Date.Date == Booking.Date.Date && b.TutorId == SelectedTutorId)
            {
                BookedTimeSlots.Add(b.Time);
            }
        }
    }

    private void ShowConfirmationModal()
    {
        var subject = Subjects.FirstOrDefault(s => s.SubjectId == SelectedSubjectId);
        var tutor = Tutors.FirstOrDefault(t => t.TutorId == SelectedTutorId);

        SelectedSubjectName = subject?.Name ?? "N/A";
        SelectedTutorName = tutor?.Name ?? "N/A";

        JS.InvokeVoidAsync("bootstrapModalShow", "bookingConfirmationModal");
    }

    private async Task ConfirmBooking()
    {
        await AddBooking();
        JS.InvokeVoidAsync("bootstrapModalHide", "bookingConfirmationModal");
    }

    private async Task AddBooking()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        string userName = user.FindFirst("FirstName")?.Value ?? "Anonymous";

        using var context = DbFactory.CreateDbContext();
        bookings = await context.Booking.ToListAsync();

        var tutor = Tutors.FirstOrDefault(t => t.TutorId == SelectedTutorId);
        if (tutor == null) return;

        Booking.TutorId = tutor.TutorId;

        var userEmail = user.FindFirst(ClaimTypes.Email)?.Value;
        Booking.StudentUserId = studentUsers.FirstOrDefault(s => s.Email == userEmail)?.StudentUserId ?? 0;


        if (bookings.Any(b => b.TutorId == Booking.TutorId && b.Time == Booking.Time && b.Date.Date == Booking.Date.Date))
        {
            DuplicateBookingMessage = "❌ This time slot is already booked. Please select a different time.";
            return;
        }

        Booking.CreatedBy = userName;
        Booking.UpdatedBy = userName;
        Booking.DateCreated = DateTime.UtcNow;
        Booking.DateUpdated = DateTime.UtcNow;
        Booking.Status = "Confirmed";

        context.Booking.Add(Booking);
        await context.SaveChangesAsync();

        NavigationManager.NavigateTo("/bookings");
    }
}
