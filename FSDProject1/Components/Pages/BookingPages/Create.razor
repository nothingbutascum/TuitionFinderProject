@page "/bookings/create"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using FSDProject1.Domain
@inject IDbContextFactory<FSDProject1.Data.FSDProject1Context> DbFactory
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Administrator, User")]

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Booking</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Booking" OnValidSubmit="AddBooking" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="date" class="form-label">Date:</label> 
                <InputDate id="date" @bind-Value="Booking.Date" class="form-control" /> 
                <ValidationMessage For="() => Booking.Date" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="time" class="form-label">Time:</label> 
                <InputDate id="time" @bind-Value="Booking.Time" class="form-control" /> 
                <ValidationMessage For="() => Booking.Time" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="status" class="form-label">Status:</label> 
                <InputText id="status" @bind-Value="Booking.Status" class="form-control" /> 
                <ValidationMessage For="() => Booking.Status" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="datecreated" class="form-label">DateCreated:</label> 
                <InputDate id="datecreated" @bind-Value="Booking.DateCreated" class="form-control" /> 
                <ValidationMessage For="() => Booking.DateCreated" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="dateupdated" class="form-label">DateUpdated:</label> 
                <InputDate id="dateupdated" @bind-Value="Booking.DateUpdated" class="form-control" /> 
                <ValidationMessage For="() => Booking.DateUpdated" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="createdby" class="form-label">CreatedBy:</label> 
                <InputText id="createdby" @bind-Value="Booking.CreatedBy" class="form-control" /> 
                <ValidationMessage For="() => Booking.CreatedBy" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="updatedby" class="form-label">UpdatedBy:</label> 
                <InputText id="updatedby" @bind-Value="Booking.UpdatedBy" class="form-control" /> 
                <ValidationMessage For="() => Booking.UpdatedBy" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="studentuserid" class="form-label">StudentUserId:</label> 
                <InputNumber id="studentuserid" @bind-Value="Booking.StudentUserId" class="form-control" /> 
                <ValidationMessage For="() => Booking.StudentUserId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="tutorid" class="form-label">TutorID:</label> 
                <InputNumber id="tutorid" @bind-Value="Booking.TutorID" class="form-control" /> 
                <ValidationMessage For="() => Booking.TutorID" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/bookings">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Booking Booking { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddBooking()
    {
        using var context = DbFactory.CreateDbContext();
        context.Booking.Add(Booking);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/bookings");
    }
}
