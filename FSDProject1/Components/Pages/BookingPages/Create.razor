@page "/bookings/create"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using FSDProject1.Domain
@inject IDbContextFactory<FSDProject1.Data.FSDProject1Context> DbFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<PageTitle>Create Booking</PageTitle>

<h1>Create Booking</h1>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm Model="Booking" OnValidSubmit="AddBooking" FormName="createBooking">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="mb-3">
                <label for="subjectid" class="form-label">Select Subject:</label>
                <InputSelect id="subjectid" @bind-Value="SelectedSubjectId" class="form-control">
                    <option value="" disabled>Select a subject</option>
                    @if (Subjects != null && Subjects.Any())
                    {
                        foreach (var subject in Subjects)
                        {
                            <option value="@subject.SubjectId">@subject.Name</option>
                        }
                    }
                </InputSelect>
            </div>

            <div class="mb-3">
                <label for="tutorid" class="form-label">Select Tutor:</label>
                <InputSelect id="tutorid" @bind-Value="SelectedTutorId" class="form-control" @onchange="OnTutorChanged">
                    <option value="0" disabled>Select a tutor</option>
                    @if (Tutors != null && Tutors.Any())
                    {
                        foreach (var tutor in Tutors)
                        {
                            <option value="@tutor.TutorId">@tutor.Name</option>
                        }
                    }
                </InputSelect>
            </div>

            <div class="mb-3">
                <label for="date" class="form-label">Date:</label>
                <InputDate id="date" @bind-Value="Booking.Date" class="form-control" @onchange="OnDateChanged" />
            </div>

            <div class="mb-3">
                <label for="time" class="form-label">Select Time Slot:</label>
                <InputSelect id="time" @bind-Value="Booking.Time" class="form-control">
                    <option value="" disabled>Select a time</option>
                    @foreach (var timeSlot in AvailableTimeSlots)
                    {
                        <option value="@timeSlot" disabled="@BookedTimeSlots.Contains(timeSlot)">@timeSlot</option>
                    }
                </InputSelect>
            </div>

            <button type="submit" class="btn btn-primary">Confirm Booking</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/bookings">Back to List</a>
</div>

@code {
    private List<Tutors> Tutors { get; set; } = new();
    private List<Subjects> Subjects { get; set; } = new();
    private int SelectedSubjectId { get; set; }
    private int SelectedTutorId { get; set; }
    private StudentUser StudentUser { get; set; } = new();
    private string AuthenticatedUserId { get; set; } = string.Empty;
    private string AuthenticatedUserName { get; set; } = "Anonymous";

    private List<string> AvailableTimeSlots = new()
    {
        "09:00", "10:00", "11:00", "12:00", "13:00", "14:00", "15:00", "16:00", "17:00"
    };

    private HashSet<string> BookedTimeSlots = new();

    [SupplyParameterFromForm(FormName = "createBooking")]
    private Booking Booking { get; set; } = new()
        {
            Date = DateTime.Now,
            Status = "Confirmed"
        };

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Subjects = await context.Subjects.ToListAsync();
        Tutors = await context.Tutors.ToListAsync();

        // Get the authenticated user details
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        AuthenticatedUserId = user.FindFirst("userId")?.Value ?? string.Empty;
        AuthenticatedUserName = user.FindFirst("FirstName")?.Value ?? "Anonymous";
    }

    private async Task OnTutorChanged(ChangeEventArgs e)
    {
        SelectedTutorId = int.Parse(e.Value.ToString());
        await LoadBookedTimeSlots();
    }

    private async Task OnDateChanged(ChangeEventArgs e)
    {
        await LoadBookedTimeSlots();
    }

    private async Task LoadBookedTimeSlots()
    {
        if (Booking.Date == default || SelectedTutorId == 0)
            return;

        using var context = DbFactory.CreateDbContext();

        BookedTimeSlots = (await context.Booking
            .Where(b => b.Date == Booking.Date && b.TutorId == SelectedTutorId)
            .Select(b => b.Time)
            .ToListAsync())
            .ToHashSet();

        StateHasChanged(); // Ensure the UI updates
    }

    private async Task AddBooking()
    {
        using var context = DbFactory.CreateDbContext();

        // ❌ Prevent double booking
        bool isTimeSlotTaken = await context.Booking
            .AnyAsync(b => b.Date == Booking.Date && b.Time == Booking.Time && b.TutorId == SelectedTutorId);

        if (isTimeSlotTaken)
        {
            Console.WriteLine("❌ This time slot is already booked. Please select a different time.");
            return;
        }

        // ✅ Ensure valid tutor selection
        var tutor = Tutors.FirstOrDefault(t => t.TutorId == SelectedTutorId);
        if (tutor == null)
        {
            Console.WriteLine("No matching tutor found.");
            return;
        }

        Booking.TutorId = tutor.TutorId;
        Booking.StudentUserId = 1; // TODO: Change this dynamically if needed
        Booking.CreatedBy = AuthenticatedUserName;
        Booking.UpdatedBy = AuthenticatedUserName;
        Booking.DateCreated = DateTime.UtcNow;
        Booking.DateUpdated = DateTime.UtcNow;
        Booking.Status = "Confirmed";

        Console.WriteLine($"User: {AuthenticatedUserName}");
        Console.WriteLine($"TutorId: {Booking.TutorId}");
        Console.WriteLine($"Date: {Booking.Date}");
        Console.WriteLine($"Time: {Booking.Time}");

        Console.WriteLine("Saving Booking...");
        context.Booking.Add(Booking);
        await context.SaveChangesAsync();
        Console.WriteLine("Booking Saved!");

        NavigationManager.NavigateTo("/bookings");
    }
}
