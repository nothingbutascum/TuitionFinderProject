@page "/studentusers/edit"
@using Microsoft.EntityFrameworkCore
@using FSDProject1.Domain
@inject IDbContextFactory<FSDProject1.Data.FSDProject1Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>StudentUser</h2>
<hr />
@if (StudentUser is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="StudentUser" OnValidSubmit="UpdateStudentUser" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="StudentUser.StudentUserId" value="@StudentUser.StudentUserId" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="StudentUser.Name" class="form-control" />
                    <ValidationMessage For="() => StudentUser.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Email:</label>
                    <InputText id="email" @bind-Value="StudentUser.Email" class="form-control" />
                    <ValidationMessage For="() => StudentUser.Email" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="age" class="form-label">Age:</label>
                    <InputNumber id="age" @bind-Value="StudentUser.Age" class="form-control" />
                    <ValidationMessage For="() => StudentUser.Age" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="datecreated" class="form-label">DateCreated:</label>
                    <InputDate id="datecreated" @bind-Value="StudentUser.DateCreated" class="form-control" />
                    <ValidationMessage For="() => StudentUser.DateCreated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dateupdated" class="form-label">DateUpdated:</label>
                    <InputDate id="dateupdated" @bind-Value="StudentUser.DateUpdated" class="form-control" />
                    <ValidationMessage For="() => StudentUser.DateUpdated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdby" class="form-label">CreatedBy:</label>
                    <InputText id="createdby" @bind-Value="StudentUser.CreatedBy" class="form-control" />
                    <ValidationMessage For="() => StudentUser.CreatedBy" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="updatedby" class="form-label">UpdatedBy:</label>
                    <InputText id="updatedby" @bind-Value="StudentUser.UpdatedBy" class="form-control" />
                    <ValidationMessage For="() => StudentUser.UpdatedBy" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/studentusers">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int StudentUserId { get; set; }

    [SupplyParameterFromForm]
    private StudentUser? StudentUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        StudentUser ??= await context.StudentUser.FirstOrDefaultAsync(m => m.StudentUserId == StudentUserId);

        if (StudentUser is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateStudentUser()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(StudentUser!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!StudentUserExists(StudentUser!.StudentUserId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/studentusers");
    }

    private bool StudentUserExists(int studentuserid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.StudentUser.Any(e => e.StudentUserId == studentuserid);
    }
}
