@page "/subjects/delete"
@using Microsoft.EntityFrameworkCore
@using FSDProject1.Domain
@inject IDbContextFactory<FSDProject1.Data.FSDProject1Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Subjects</h2>
    <hr />
    @if (subjects is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@subjects.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@subjects.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@subjects.DateUpdated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@subjects.CreatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@subjects.UpdatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">TutorId</dt>
            <dd class="col-sm-10">@subjects.TutorId</dd>
        </dl>
        <EditForm method="post" Model="subjects" OnValidSubmit="DeleteSubjects" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(subjects is null)">Delete</button> |
            <a href="/subjects">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Subjects? subjects;

    [SupplyParameterFromQuery]
    private int SubjectId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        subjects = await context.Subjects.FirstOrDefaultAsync(m => m.SubjectId == SubjectId);

        if (subjects is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteSubjects()
    {
        using var context = DbFactory.CreateDbContext();
        context.Subjects.Remove(subjects!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/subjects");
    }
}
