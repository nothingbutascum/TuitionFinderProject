@page "/subjects/details"
@using Microsoft.EntityFrameworkCore
@using FSDProject1.Domain
@inject IDbContextFactory<FSDProject1.Data.FSDProject1Context> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Subjects</h2>
    <hr />
    @if (subjects is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@subjects.Name</dd>
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@subjects.DateCreated</dd>
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@subjects.DateUpdated</dd>
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@subjects.CreatedBy</dd>
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@subjects.UpdatedBy</dd>
            <dt class="col-sm-2">TutorId</dt>
            <dd class="col-sm-10">@subjects.TutorId</dd>
        </dl>
        <div>
            <a href="@($"/subjects/edit?subjectid={subjects.SubjectId}")">Edit</a> |
            <a href="@($"/subjects")">Back to List</a>
        </div>
    }
</div>

@code {
    private Subjects? subjects;

    [SupplyParameterFromQuery]
    private int SubjectId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        subjects = await context.Subjects.FirstOrDefaultAsync(m => m.SubjectId == SubjectId);

        if (subjects is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
